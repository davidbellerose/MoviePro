
Movie Muster

************************ 
TODO
***********************

readme
brand and logo
host on railway
add to portfolio

***************************
    BUGS
****************************
My Movies FILTER
 ** MoviesController.Library, can't get movies by collection

MoviesController.Details, can't get collection name to display in view


***************************
    FEATURES
****************************
browse menu refactor to loop through tmdb genres instead of hard code links
seeder
movies you want to watch go in the watch list, after watching, 
    change catagory to whatever, which shows it was watched



https://learn.coderfoundry.com/products/the-complete-net-coding-bootcamp/categories/2147908385/posts/2152112657

******************************************************
   NOTES
******************************************************

MoviesController Details view checks if request from api or db  version
    import method to add to database

MovieCollection is the join table for many-to-many movie-collection

MovieCollectionsController.index, for selct boxes to move moveis to and from collection

the library looks like the movies that were imported into db

----------------------------------------------------

The startup.cs line `services.Configure<AppSettings>(Configuration.GetSection("AppSettings"));`
	puts the json data into an "AppSettings" class (or object?).

The Settings/AppSettings is a container for the TMDBSettings and MovieProSettings.
	The TMDBSettings has class/properties for the API image/video data, base url, query options etc.
	The MovieProSettings has class/properties to represent the API credentials.

The _appSettings (AppSettings.TMDBSettings) is injected into the constructor of
	the TMDBMovieService where the request and response info is retrieved using
	the AppSettings(API info) class. The MovieDetailAsync method gets _appSettings,
	then instantiates and returns a new movieDetail object based on the MovieDetail class(model).
	this is an object populated with the info from the api.

The TMDBMappingService.MapMovieDetailAsync method
		maps the data into the newMovie class properties.
			so when does the newMovie class become an object, in the controller?
	? the mapping service takes the MovieDetail(api version),  and maps(transfers?)
		the data to an instance of the Movie class/model
		via the MoviesController.Import method. (Is this projection?)
		The movie is imported/added to the local/app SQL database
		It's a copy from the API stored in the app db.


TMDBMovieService => public async Task<MovieDetail> MovieDetailAsync(int id)
Models/TMDB/MovieDetail
	returning an instance of MovieDetail based on MovieDetail model/class.
this has movie info from api

TMDBMappingService => public async Task<Movie> MapMovieDetailAsync(MovieDetail movie)
Models/Database/Movie
	It's a method that takes in an instance of MovieDetail and returns an instance of Movie
	? mapping vs. projection?

MoviesController
public async Task<IActionResult> Import(int id)
var movieDetail = await _movieService.MovieDetailAsync(id);
		// gets the movie from the api
var movie = await _mappingService.MapMovieDetailAsync(movieDetail);
		// maps the data to copy it into the movie object
		// now the controller can put a copy in the database
		// keep the api and database versions separate

If you watch the intro video to this project
 you will see that only the api part is constructed
 all the other parts shown in the intro video are not done.

************************************************
GENRES
***********************************************
{
  "genres": [
    {
      "id": 28,
      "name": "Action"
    },
    {
      "id": 12,
      "name": "Adventure"
    },
    {
      "id": 16,
      "name": "Animation"
    },
    {
      "id": 35,
      "name": "Comedy"
    },
    {
      "id": 80,
      "name": "Crime"
    },
    {
      "id": 99,
      "name": "Documentary"
    },
    {
      "id": 18,
      "name": "Drama"
    },
    {
      "id": 10751,
      "name": "Family"
    },
    {
      "id": 14,
      "name": "Fantasy"
    },
    {
      "id": 36,
      "name": "History"
    },
    {
      "id": 27,
      "name": "Horror"
    },
    {
      "id": 10402,
      "name": "Music"
    },
    {
      "id": 9648,
      "name": "Mystery"
    },
    {
      "id": 10749,
      "name": "Romance"
    },
    {
      "id": 878,
      "name": "Science Fiction"
    },
    {
      "id": 10770,
      "name": "TV Movie"
    },
    {
      "id": 53,
      "name": "Thriller"
    },
    {
      "id": 10752,
      "name": "War"
    },
    {
      "id": 37,
      "name": "Western"
    }
  ]
}